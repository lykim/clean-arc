package com.bit.core.usecase.kpi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

import com.bit.core.config.GatewayConfig;
import com.bit.core.constant.ErrorMessage;
import com.bit.core.constant.RoleCode;
import com.bit.core.entity.Salesman;
import com.bit.core.gateway.BhaktiApiGateway;
import com.bit.core.gateway.KpiGateway;
import com.bit.core.gateway.UnitKpiGateway;
import com.bit.core.gateway.UserGateway;
import com.bit.core.gateway.factory.GatewayFactory;
import com.bit.core.mocks.gateway.MockBhaktiApiGateway;
import com.bit.core.mocks.gateway.MockKpiGateway;
import com.bit.core.mocks.gateway.MockUnitKpiGateway;
import com.bit.core.mocks.gateway.MockUserGateway;
import com.bit.core.model.request.SalesmanKpiRequestModel;
import com.bit.core.model.request.SalesmanRequestModel;
import com.bit.core.model.request.SalesmanTargetKpiRequestModel;
import com.bit.core.model.request.UnitKpiRequestModel;
import com.bit.core.model.request.UserRequestModel;
import com.bit.core.response.CreateResponseModel;
import com.bit.core.response.FindManyResponseModel;
import com.bit.core.response.base.ResponseModel;
import com.bit.core.strategy.FindManyStrategy;
import com.bit.core.strategy.findMany.FindSubordinateSalesmanFromApi;
import com.bit.core.usecase.FindManyUsecase;
import com.bit.core.usecase.base.Usecase;
import com.bit.core.usecase.creator.CreateUserUsecase;
import com.bit.core.utils.RequestModelHelper;
import com.bit.core.utils.TokenUtils;
import com.bit.core.validator.string.EmptyValidator;

@TestMethodOrder(OrderAnnotation.class)
public class SaveSalemanTargetUsecaseTest {
	private static String token;
	private static String unitKpiToken;
	private static KpiGateway kpiGateway;
	private static UnitKpiGateway unitKpiGateway;
	private static UserGateway userGateway;
	private static BhaktiApiGateway bhaktiApiGateway;
	private static RequestModelHelper<SalesmanKpiRequestModel> requestModelHelper;
	private final static String SALESMAN_CODE = "SPS-A01";
	private static String idUnitKpi1 = "";
	private static String idUnitKpi2 = "";
	private static String idUnitKpi3 = "";
	private static String username = "Zuser1";
	
	@BeforeAll
	public static void beforeAll() {
		setConfig();
		createUser(username, "mail@mail.com", "password123");
		createSalesmanFromApi();
		List<String> unitKpis = Arrays.asList(RoleCode.ROLE_UNIT_KPI_CUD);
		unitKpiToken = TokenUtils.createJWT( username, unitKpis,  60000);
		List<String> roles = Arrays.asList(RoleCode.ROLE_TARGET_SALESMAN_KPI_CUD, RoleCode.ROLE_SALESMAN_VIEW);
		token = TokenUtils.createJWT( username, roles,  60000);
		requestModelHelper = new RequestModelHelper<SalesmanKpiRequestModel>(new SalesmanKpiRequestModel(), token);
		createUnitKpis();
	}
	
	@AfterAll
	public static void afterAll() {
		resetConfig();
		kpiGateway.clean();
		unitKpiGateway.clean();
		userGateway.clean();
		bhaktiApiGateway.clean();
	}
	
	@Test
	public void givenBlankAllRequiredFields_willGetValidationMessage() {
		SalesmanKpiRequestModel requestModel = requestModelHelper.getRequestModelWithToken();
		Usecase<?,?> usecase = new CreateTargetKpiSalesmanUsecase(requestModel);
		usecase.run();
		ResponseModel response = usecase.getResponseModel();
		assertFalse(response.isSuccess);
		assertEquals(EmptyValidator.VALIDATION_MESSAGE, response.validationMessages.get(SalesmanKpiRequestModel.Label.SALESMAN_CODE));
	}
	
	@Test
	public void whenTotalBobotIsNotMax_willError() {
		SalesmanKpiRequestModel requestModel = requestModelHelper.getRequestModelWithToken();
		requestModel.salesmanCode = SALESMAN_CODE;
		Usecase<?,?> usecase = new CreateTargetKpiSalesmanUsecase(requestModel);
		usecase.run();
		ResponseModel response = usecase.getResponseModel();
		assertFalse(response.isSuccess);
		assertEquals(ErrorMessage.BOBOT_NOT_MAX, response.errorMessage);
	}
	
	@Test
	@Order(1)
	public void givenNewSalesmanTarget_thenCreateNew() {
		SalesmanKpiRequestModel requestModel = requestModelHelper.getRequestModelWithToken();
		requestModel.salesmanCode = SALESMAN_CODE;
		List<SalesmanTargetKpiRequestModel> targetKpis = new ArrayList<>();
		SalesmanTargetKpiRequestModel target1 = createSalesmanTargetKpiRequest(50, 2000000, 100, idUnitKpi1);
		SalesmanTargetKpiRequestModel target2 = createSalesmanTargetKpiRequest(50, 80, 100, idUnitKpi2);
		targetKpis.add(target1);
		targetKpis.add(target2);
		requestModel.targetKpiSalesman = targetKpis;
		requestModel.totalTarget = new BigDecimal(500000000);
		
		Usecase<?,?> usecase = new CreateTargetKpiSalesmanUsecase(requestModel);
		usecase.run();
		ResponseModel response = usecase.getResponseModel();
		assertTrue(response.isSuccess);
		Salesman salesman =  kpiGateway.getSalesmanByCode(SALESMAN_CODE);
		assertEquals(requestModel.totalTarget,salesman.getTotalTargetKpi());
		assertEquals(targetKpis.size(), salesman.getTargetKpis().size());
		salesman.getTargetKpis().forEach(kpi -> {
			if(idUnitKpi1.equals( kpi.getUnitKpi().getId() )) {
				assertEquals(target1.bobot, kpi.getBobot());
				assertEquals(target1.target, kpi.getTarget());
				assertEquals(target1.targetPoint, kpi.getTargetPoint());
			}else {
				assertEquals(target2.bobot, kpi.getBobot());
				assertEquals(target2.target, kpi.getTarget());
				assertEquals(target2.targetPoint, kpi.getTargetPoint());
			}
		});
	}
	
	@Test
	@Order(1)
	public void givenUpdatedSalesmanTarget_thenUpdate() {
		SalesmanKpiRequestModel requestModel = requestModelHelper.getRequestModelWithToken();
		requestModel.salesmanCode = SALESMAN_CODE;
		List<SalesmanTargetKpiRequestModel> targetKpis = new ArrayList<>();
		SalesmanTargetKpiRequestModel target1 = createSalesmanTargetKpiRequest(50, 2000000, 100, idUnitKpi3);
		SalesmanTargetKpiRequestModel target2 = createSalesmanTargetKpiRequest(50, 80, 100, idUnitKpi2);
		targetKpis.add(target1);
		targetKpis.add(target2);
		requestModel.targetKpiSalesman = targetKpis;
		requestModel.totalTarget = new BigDecimal(500000000);
		
		Usecase<?,?> usecase = new CreateTargetKpiSalesmanUsecase(requestModel);
		usecase.run();
		ResponseModel response = usecase.getResponseModel();
		assertTrue(response.isSuccess);
		Salesman salesman =  kpiGateway.getSalesmanByCode(SALESMAN_CODE);
		assertEquals(requestModel.totalTarget,salesman.getTotalTargetKpi());
		assertEquals(targetKpis.size(), salesman.getTargetKpis().size());
		salesman.getTargetKpis().forEach(kpi -> {
			if(idUnitKpi1.equals( kpi.getUnitKpi().getId() )) {
				assertEquals(target1.bobot, kpi.getBobot());
				assertEquals(target1.target, kpi.getTarget());
				assertEquals(target1.targetPoint, kpi.getTargetPoint());
			}else {
				assertEquals(target2.bobot, kpi.getBobot());
				assertEquals(target2.target, kpi.getTarget());
				assertEquals(target2.targetPoint, kpi.getTargetPoint());
			}
		});
	}
	
	private static void createSalesmanFromApi() {
		List<String> myRoles = Arrays.asList(RoleCode.ROLE_SALESMAN_VIEW);
		SalesmanRequestModel requestModel = new SalesmanRequestModel();
		requestModel.token = TokenUtils.createJWT( username, myRoles,  60000);
		FindManyStrategy<Salesman, SalesmanRequestModel> findManyStrategy = new FindSubordinateSalesmanFromApi(requestModel);
		FindManyUsecase<?,?,?> usecase = new FindManyUsecase<>(requestModel, new FindManyResponseModel<Salesman>(), findManyStrategy, myRoles);
		usecase.run();
	}
	
	private SalesmanTargetKpiRequestModel createSalesmanTargetKpiRequest(int bobot, int target, int targetPoint, String idUnitKpi) {
		SalesmanTargetKpiRequestModel targetSalesman = new SalesmanTargetKpiRequestModel();
		targetSalesman.bobot = bobot;
		targetSalesman.target = target;
		targetSalesman.targetPoint = targetPoint;
		targetSalesman.unitKpiId = idUnitKpi;
		return targetSalesman;
	}
	
	private static void createUnitKpis() {
		idUnitKpi1 = generateUnitKpi("Target 1");
		idUnitKpi2 = generateUnitKpi("Target 2");
		idUnitKpi3 = generateUnitKpi("Target 3");
	}
	
	private static String generateUnitKpi(String name) {
		UnitKpiRequestModel requestModel = new UnitKpiRequestModel();
		requestModel.token = unitKpiToken;
		requestModel.name = name;
		Usecase<?, CreateResponseModel> usecase = new CreateUnitKpiUsecase(requestModel);
		usecase.run();
		CreateResponseModel response = usecase.getResponseModel();
		return response.id;
	}
	
	private static String createUser(String username, String email, String password) {
		List<String> roles = Arrays.asList(RoleCode.ROLE_USER_CUD);
		String tokenForCreateUser = TokenUtils.createJWT( "any", roles,  60000);
		UserRequestModel request = new UserRequestModel();
		request.token = tokenForCreateUser;
		request.username = username;
		request.email = email;
		request.password = password;
		request.salesmanCode = "RUK-ATN";
		Usecase<?, CreateResponseModel> usecase = new CreateUserUsecase(request);
		usecase.run();
		CreateResponseModel response = usecase.getResponseModel();
		return response.id;
	}
	
	private static void setConfig() {
		GatewayConfig.userGateway = MockUserGateway.getInstance();
		GatewayConfig.kpiGateway = MockKpiGateway.getInstance();
		GatewayConfig.unitKpiGateway = MockUnitKpiGateway.getInstance();
		GatewayConfig.bhaktiApiGateway = new MockBhaktiApiGateway();
		userGateway = (UserGateway)GatewayFactory.USER_GATEWAY.get();
		bhaktiApiGateway = (BhaktiApiGateway) GatewayFactory.BHAKTI_API_GATEWAY.get();
		kpiGateway = (KpiGateway)GatewayFactory.KPI_GATEWAY.get();
		kpiGateway = (KpiGateway)GatewayFactory.KPI_GATEWAY.get();
		unitKpiGateway = (UnitKpiGateway)GatewayFactory.UNIT_KPI_GATEWAY.get();
	}
	
	private static void resetConfig() {
		GatewayFactory.KPI_GATEWAY.destroy();
	}
}
