package com.bit.core.usecase.approval.kpi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import java.time.YearMonth;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.bit.core.constant.ErrorMessage;
import com.bit.core.constant.RoleCode;
import com.bit.core.entity.KpiPeriod;
import com.bit.core.model.request.FindManyRequestModel;
import com.bit.core.model.request.UnitKpiRequestModel;
import com.bit.core.response.CreateResponseModel;
import com.bit.core.response.FindManyResponseModel;
import com.bit.core.strategy.FindManyStrategy;
import com.bit.core.strategy.findMany.FindManyTargetKpiApproval;
import com.bit.core.usecase.BaseUsecaseTest;
import com.bit.core.usecase.FindManyUsecase;
import com.bit.core.usecase.base.Usecase;
import com.bit.core.usecase.kpi.CreateUnitKpiUsecase;
import com.bit.core.utility.UserUsecaseUtils;
import com.bit.core.utils.TokenUtils;
import com.bit.core.validator.NullValidator;

public class FindManyKpiApprovalTest extends BaseUsecaseTest {
	private static String approverToken;
	private static String notApproverToken;
	private static String unitKpiToken;
//	private static List<String> viewRoles;
	private static String usernameApprover = "Zuser1";
	private static String usernameNotApprover = "Zuser2";
	private static String idUnitKpi1 = "";
	private static String idUnitKpi2 = "";
	private static String idUnitKpi3 = "";

	
	@BeforeAll
	public static void beforeAll() {
//		viewRoles = Arrays.asList(RoleCode.ROLE_SALESMAN_VIEW);
		approverToken = TokenUtils.createJWT( usernameApprover, null,  60000);
		notApproverToken = TokenUtils.createJWT(usernameNotApprover, null, 50000);
		UserUsecaseUtils.createUser(usernameApprover, "mail@mail.com", "password123");
		UserUsecaseUtils.createUser(usernameNotApprover, "mail@mail.com", "password123");
		List<String> unitKpis = Arrays.asList(RoleCode.ROLE_UNIT_KPI_CUD);
		unitKpiToken = TokenUtils.createJWT( username, unitKpis,  60000);
	}
	@Test
	public void givenNoPeriod_willGetValidationError() {
		FindManyRequestModel requestModel = new FindManyRequestModel();
		requestModel.token = approverToken;
		FindManyStrategy<KpiPeriod, FindManyRequestModel> findManyStrategy = new FindManyTargetKpiApproval(requestModel);
		FindManyUsecase<?,?,?> usecase = new FindManyUsecase<>(requestModel, new FindManyResponseModel<KpiPeriod>(), findManyStrategy, null);
		usecase.run();
		FindManyResponseModel<KpiPeriod> response = (FindManyResponseModel<KpiPeriod>)usecase.getResponseModel();
		assertFalse(response.isSuccess);
		assertEquals(NullValidator.VALIDATION_MESSAGE, response.validationMessages.get("period"));
	}

	@Test
	public void givenNotApproverToken_willError() {
		FindManyRequestModel requestModel = new FindManyRequestModel();
		requestModel.token = notApproverToken;
		Map<String, String> filterEqual = new HashMap<>();
		YearMonth yearMonth = YearMonth.of(2021, 06);
		filterEqual.put("period", yearMonth.toString());
		requestModel.filterEqual = filterEqual;
		FindManyStrategy<KpiPeriod, FindManyRequestModel> findManyStrategy = new FindManyTargetKpiApproval(requestModel);
		FindManyUsecase<?,?,?> usecase = new FindManyUsecase<>(requestModel, new FindManyResponseModel<KpiPeriod>(), findManyStrategy, null);
		usecase.run();
		FindManyResponseModel<KpiPeriod> response = (FindManyResponseModel<KpiPeriod>)usecase.getResponseModel();
		assertFalse(response.isSuccess);
		assertEquals(ErrorMessage.UNAUTHORIZED, response.errorMessage);
	}
	
	@Test
	public void givenRequiredFields_willGetSubmittedData() {
		
	}
	
	private static void createUnitKpis() {
		idUnitKpi1 = generateUnitKpi("Target 1");
		idUnitKpi2 = generateUnitKpi("Target 2");
		idUnitKpi3 = generateUnitKpi("Target 3");
	}
	
	private static String generateUnitKpi(String name) {
		UnitKpiRequestModel requestModel = new UnitKpiRequestModel();
		requestModel.token = unitKpiToken;
		requestModel.name = name;
		Usecase<?, CreateResponseModel> usecase = new CreateUnitKpiUsecase(requestModel);
		usecase.run();
		CreateResponseModel response = usecase.getResponseModel();
		return response.id;
	}
}